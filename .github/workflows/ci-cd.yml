name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: List Repository Files
        run: ls -al

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: List Repository Files
        run: ls -al

      - name: Check if package.json Exists
        working-directory: ./card-capture
        run: test -f package.json || { echo "package.json not found"; exit 1; }

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 네트워크 연결 테스트 단계 추가
      - name: Test Network Connectivity
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "=== Network Connectivity Test ==="

          # 기본 연결성 테스트
          echo "1. Ping test:"
          ping -c 3 $SERVER_IP || echo "Ping failed"

          # 포트 연결 테스트 (여러 방법)
          echo "2. Port 22 connectivity test:"
          timeout 10 bash -c "</dev/tcp/$SERVER_IP/22" && echo "Port 22 is open" || echo "Port 22 is closed/filtered"

          # ncat/nc 테스트
          echo "3. NC test:"
          timeout 5 nc -zv $SERVER_IP 22 || echo "NC test failed"

          # curl 테스트
          echo "4. Curl test:"
          timeout 5 curl -v telnet://$SERVER_IP:22 || echo "Curl test failed"

          # GitHub Actions 러너의 IP 확인
          echo "5. GitHub Actions Runner IP:"
          curl -s https://api.ipify.org || echo "IP lookup failed"

          echo "=== Test completed ==="

      # SSH 연결 디버깅 단계
      - name: Debug SSH Connection
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # SSH 키 형식 확인
          echo "=== SSH Key Debug ==="
          echo "SSH_PRIVATE_KEY 길이: ${#SSH_PRIVATE_KEY}"
          echo "SSH_PRIVATE_KEY 첫 번째 줄:"
          echo "$SSH_PRIVATE_KEY" | head -1
          echo "SSH_PRIVATE_KEY 마지막 줄:"
          echo "$SSH_PRIVATE_KEY" | tail -1

          # SSH 키 파일 생성
          echo "$SSH_PRIVATE_KEY" > deployment_key_test.pem
          chmod 600 deployment_key_test.pem

          # SSH 키 유효성 검사
          echo "=== SSH Key Validation ==="
          ssh-keygen -l -f deployment_key_test.pem || echo "SSH 키 형식 오류"

          # SSH known_hosts 설정
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

          # SSH 연결 테스트
          echo "=== SSH Connection Test ==="
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i deployment_key_test.pem $SERVER_USER@$SERVER_IP "echo 'SSH 연결 성공: $(whoami)@$(hostname)'" || {
            echo "SSH 연결 실패"
            echo "가능한 원인:"
            echo "1. SSH 키가 서버에 등록되지 않음"
            echo "2. 서버 IP/사용자명 오류: $SERVER_USER@$SERVER_IP"
            echo "3. 방화벽/보안그룹 설정"
            echo "4. SSH 서비스 미실행"
            exit 1
          }

          # 정리
          rm -f deployment_key_test.pem

      # 기존 배포 단계
      - name: Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
          NEXT_PUBLIC_API_KEY: ${{ secrets.NEXT_PUBLIC_API_KEY }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NEXT_PUBLIC_MODE: ${{ secrets.NEXT_PUBLIC_MODE }}
          NEXT_PUBLIC_CHANNEL_KEY: ${{ secrets.NEXT_PUBLIC_CHANNEL_KEY }}
          NEXT_PUBLIC_STORE_ID: ${{ secrets.NEXT_PUBLIC_STORE_ID }}
          NEXT_PUBLIC_AMPLITUDE_API_KEY: ${{ secrets.NEXT_PUBLIC_AMPLITUDE_API_KEY }}
          NEXT_PUBLIC_CHANNEL_TALK_PLUGIN_KEY: ${{ secrets.NEXT_PUBLIC_CHANNEL_TALK_PLUGIN_KEY }}
          S3_BUCKET_URL: ${{ secrets.S3_BUCKET_URL }}
          NODE_OPTIONS: "--max-old-space-size=8192"

        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > deployment_key.pem
          chmod 400 deployment_key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=600 -o ServerAliveCountMax=1200 -i deployment_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<'EOF'
            set -e

            BASE_DIR="/home/${{ secrets.SERVER_USER }}/card-capture-fe"
            PROJECT_DIR="$BASE_DIR/card-capture"
            REPO_URL="https://github.com/SW-rocket-dan/card-capture-fe.git"

            echo "BASE_DIR: $BASE_DIR"
            echo "PROJECT_DIR: $PROJECT_DIR"
            echo "REPO_URL: $REPO_URL"

            if [ -d "$BASE_DIR" ]; then
              echo "Removing existing directory..."
              rm -rf "$BASE_DIR"
            fi

            echo "Creating new directory..."
            mkdir -p "$BASE_DIR"
            cd "$BASE_DIR"

            echo "Cloning repository..."
            git clone $REPO_URL . || { echo "Git clone failed"; exit 1; }

            cd "$PROJECT_DIR"

            echo "Current directory: $(pwd)"
            ls -la

            echo "Setting environment variables..."
            echo "NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }}" > .env
            echo "NEXT_PUBLIC_CHANNEL_KEY=${{ secrets.NEXT_PUBLIC_CHANNEL_KEY }}" >> .env
            echo "NEXT_PUBLIC_STORE_ID=${{ secrets.NEXT_PUBLIC_STORE_ID }}" >> .env
            echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
            echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env
            echo "NEXT_PUBLIC_AMPLITUDE_API_KEY=${{ secrets.NEXT_PUBLIC_AMPLITUDE_API_KEY }}" >> .env
            echo "NEXT_PUBLIC_CHANNEL_TALK_PLUGIN_KEY=${{ secrets.NEXT_PUBLIC_CHANNEL_TALK_PLUGIN_KEY }}" >> .env
            echo "S3_BUCKET_URL=${{ secrets.S3_BUCKET_URL }}" >> .env

            echo "Installing npm packages..."
            npm install

            echo "Building the repository..."
            NODE_OPTIONS=--max-old-space-size=8192 npm run build # 빌드 시 메모리 한도 적용

            echo "Deleting existing PM2 process..."
            pm2 delete card-capture || true

            echo "Starting application with PM2..."
            NODE_OPTIONS=--max-old-space-size=8192 pm2 start npm --name "card-capture" -- start # PM2 시작 시 메모리 한도 적용

            echo "Saving PM2 configuration..."
            pm2 save

            echo "Setting PM2 to start on boot..."
            pm2 startup | tail -n 1 | sudo bash
          EOF
