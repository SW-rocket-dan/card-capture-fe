name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: List repository files
        run: ls -al

      - name: Verify package.json exists
        working-directory: ./card-capture
        run: test -f package.json || { echo "package.json not found"; exit 1; }

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./card-capture
        run: npm install

      # Lint step removed

      - name: Run tests
        working-directory: ./card-capture
        run: npm test

      - name: Build project
        working-directory: ./card-capture
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          echo "SKIPPING LINT DURING BUILD"
          CI= npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: List repository files
        run: ls -al

      - name: Verify package.json exists
        working-directory: ./card-capture
        run: test -f package.json || { echo "package.json not found"; exit 1; }

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./card-capture
        run: npm install

      - name: Build project
        working-directory: ./card-capture
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_JWT_TOKEN: ${{ secrets.NEXT_PUBLIC_JWT_TOKEN }}
        run: npm run build

      - name: Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > deployment_key.pem
          chmod 400 deployment_key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

          ssh -o StrictHostKeyChecking=no -i deployment_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<EOF
            set -e

            # 디렉토리 확인 및 생성
            BASE_DIR="/home/${{ secrets.SERVER_USER }}/card-capture-fe"
            PROJECT_DIR="$BASE_DIR/card-capture"
            if [ ! -d "$BASE_DIR" ]; then
              mkdir -p "$BASE_DIR"
            fi
            cd "$BASE_DIR"

            # Git 저장소 클론 또는 풀
            if [ ! -d ".git" ]; then
              echo "Cloning repository..."
              git clone $REPO_URL . || { echo "Git clone failed"; exit 1; }
            else
              echo "Pulling latest changes..."
              git pull || { echo "Git pull failed"; exit 1; }
            fi

            # 프로젝트 디렉토리로 이동
            cd "$PROJECT_DIR"

            # 현재 디렉토리 확인
            echo "Current directory: $(pwd)"
            ls -la

            # package.json 확인
            if [ ! -f "package.json" ]; then
              echo "Error: package.json not found"
              exit 1
            fi

            # 환경 변수 설정
            echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > .env
            echo "NEXT_PUBLIC_JWT_TOKEN=${{ secrets.NEXT_PUBLIC_JWT_TOKEN }}" >> .env

            # 패키지 설치 및 빌드
            npm install
            npm run build

            # PM2로 애플리케이션 시작 또는 재시작
            if pm2 list | grep -q "card-capture-fe"; then
              pm2 restart card-capture-fe
            else
              pm2 start npm --name "card-capture-fe" -- start
            fi
          EOF
